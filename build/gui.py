# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import tkinter as tk
from pathlib import Path
from tkinter import Canvas, Button
from PIL import Image, ImageTk  # Importando o Pillow para lidar com GIFs animados
import lanca_dados

# Caminho para os arquivos de recursos
ASSETS_PATH = Path(r"C:\Users\Brend\Documents\Brendo\6-Projetos\Jogos\Lança Dados\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    # Verifica se o arquivo existe antes de retornar
    asset_path = ASSETS_PATH / Path(path)
    if not asset_path.exists():
        raise FileNotFoundError(f"Arquivo não encontrado: {asset_path}")
    return asset_path


# Função para lançar o dado e atualizar a imagem
def jogar_dado():
    valor = lanca_dados.jogar()  # Lança o dado (retorna valor entre 1 e 6)
    imagens = {
        1: image_image_2,
        2: image_image_3,
        3: image_image_4,
        4: image_image_5,
        5: image_image_6,
        6: image_image_7,
    }

    # Carregar o GIF de dado girando (usando Pillow)
    gif = Image.open(relative_to_assets("dado-girando.gif"))

    # Função para atualizar o frame do GIF
    def animar_gif(frame=0):
        gif.seek(frame)  # Mover para o próximo quadro do GIF
        gif_frame = ImageTk.PhotoImage(gif)  # Converter para o formato que o Tkinter entende
        label.config(image=gif_frame)  # Atualizar a imagem do label
        label.image = gif_frame  # Manter referência à imagem para não ser descartada

        # Chama a função novamente para animar o próximo quadro após 50ms (ajuste conforme necessário)
        window.after(50, animar_gif, (frame + 1) % gif.n_frames)

    # Limpar qualquer imagem anterior antes de começar a animação
    label.pack_forget()
    label.config(image=None)  # Limpar a imagem anterior

    # Recriar o label e iniciar a animação
    label.pack()
    animar_gif()

    # Após 1 segundo (1000 ms), troca para a imagem final do dado
    def atualizar_imagem():
        canvas.itemconfig(dado_atual, image=imagens[valor])
        label.pack_forget()  # Remove o GIF de animação após a troca

    window.after(1000, atualizar_imagem)  # Atualiza imagem do dado após 1 segundo


# Configuração da janela
window = tk.Tk()
window.geometry("1280x720")
window.configure(bg="#FFFFFF")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=720,
    width=1280,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
canvas.place(x=0, y=0)

# Imagem de fundo
image_image_1 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_1.png")))
canvas.create_image(640.0, 360.0, image=image_image_1)

# Carregar imagens do dado
image_image_2 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_2.png")))
image_image_3 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_3.png")))
image_image_4 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_4.png")))
image_image_5 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_5.png")))
image_image_6 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_6.png")))
image_image_7 = ImageTk.PhotoImage(Image.open(relative_to_assets("image_7.png")))

# Imagem inicial do dado (pode ser a de número 1 por padrão)
dado_atual = canvas.create_image(640.0, 360.0, image=image_image_2)

# Botão para lançar o dado
button_image_1 = ImageTk.PhotoImage(Image.open(relative_to_assets("button_1.png")))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=jogar_dado,  # Chama a função para jogar o dado
    relief="flat"
)
button_1.place(x=492.0, y=532.0, width=295.0, height=104.0)

# Label para exibir o GIF
label = tk.Label(window)

window.resizable(False, False)
window.mainloop()
